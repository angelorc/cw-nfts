/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, Expiration, Timestamp, Uint64, Uint128, Scheduled, ConfigResponse, StageResponse, Coin, Config, ExecuteMsg, InstantiateMsg, Stage, QueryMsg } from "./Bs721Launchpad.types";
export interface Bs721LaunchpadMessage {
  contractAddress: string;
  sender: string;
  mint: ({
    proofs,
    stage
  }: {
    proofs: string[];
    stage: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class Bs721LaunchpadMessageComposer implements Bs721LaunchpadMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mint = this.mint.bind(this);
  }

  mint = ({
    proofs,
    stage
  }: {
    proofs: string[];
    stage: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint: {
            proofs,
            stage
          }
        })),
        funds
      })
    };
  };
}